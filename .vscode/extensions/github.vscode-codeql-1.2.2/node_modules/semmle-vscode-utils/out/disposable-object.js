"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class to make it easier to implement a `Disposable` that owns other disposable object.
 */
class DisposableObject {
    constructor() {
        this.disposables = [];
        this.tracked = undefined;
    }
    /**
     * Adds `obj` to a list of objects to dispose when `this` is disposed. Objects added by `push` are
     * disposed in reverse order of being added.
     * @param obj The object to take ownership of.
     */
    push(obj) {
        if (obj !== undefined) {
            this.disposables.push(obj);
        }
        return obj;
    }
    /**
     * Adds `obj` to a set of objects to dispose when `this` is disposed. Objects added by
     * `track` are disposed in an unspecified order.
     * @param obj The object to track.
     */
    track(obj) {
        if (obj !== undefined) {
            if (this.tracked === undefined) {
                this.tracked = new Set();
            }
            this.tracked.add(obj);
        }
        return obj;
    }
    /**
     * Removes `obj`, which must have been previously added by `track`, from the set of objects to
     * dispose when `this` is disposed. `obj` itself is disposed.
     * @param obj The object to stop tracking.
     */
    disposeAndStopTracking(obj) {
        if (obj !== undefined) {
            this.tracked.delete(obj);
            obj.dispose();
        }
    }
    dispose() {
        if (this.tracked !== undefined) {
            for (const trackedObject of this.tracked.values()) {
                trackedObject.dispose();
            }
            this.tracked = undefined;
        }
        while (this.disposables.length > 0) {
            this.disposables.pop().dispose();
        }
    }
}
exports.DisposableObject = DisposableObject;

//# sourceMappingURL=disposable-object.js.map
