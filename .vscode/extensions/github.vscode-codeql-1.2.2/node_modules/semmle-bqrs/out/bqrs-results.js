"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bqrs_schema_1 = require("./bqrs-schema");
/**
 * The CodeQL filesystem libraries use this pattern in `getURL()` predicates
 * to describe the location of an entire filesystem resource.
 * Such locations appear as `StringLocation`s instead of `FivePartLocation`s.
 *
 * Folder resources also get similar URLs, but with the `folder` scheme.
 * They are deliberately ignored here, since there is no suitable location to show the user.
 */
const FILE_LOCATION_REGEX = /file:\/\/(.+):([0-9]+):([0-9]+):([0-9]+):([0-9]+)/;
/**
 * Gets a resolvable source file location for the specified `LocationValue`, if possible.
 * @param loc The location to test.
 */
function tryGetResolvableLocation(loc) {
    if (loc === undefined) {
        return undefined;
    }
    else if (loc.t === bqrs_schema_1.LocationStyle.FivePart && loc.file) {
        return loc;
    }
    else if (loc.t === bqrs_schema_1.LocationStyle.WholeFile && loc.file) {
        return loc;
    }
    else if (loc.t === bqrs_schema_1.LocationStyle.String && loc.loc) {
        return tryGetLocationFromString(loc);
    }
    else {
        return undefined;
    }
}
exports.tryGetResolvableLocation = tryGetResolvableLocation;
function tryGetLocationFromString(loc) {
    const matches = FILE_LOCATION_REGEX.exec(loc.loc);
    if (matches && matches.length > 1 && matches[1]) {
        if (isWholeFileMatch(matches)) {
            return {
                t: bqrs_schema_1.LocationStyle.WholeFile,
                file: matches[1],
            };
        }
        else {
            return {
                t: bqrs_schema_1.LocationStyle.FivePart,
                file: matches[1],
                lineStart: Number(matches[2]),
                colStart: Number(matches[3]),
                lineEnd: Number(matches[4]),
                colEnd: Number(matches[5]),
            };
        }
    }
    else {
        return undefined;
    }
}
exports.tryGetLocationFromString = tryGetLocationFromString;
function isWholeFileMatch(matches) {
    return (matches[2] === "0" &&
        matches[3] === "0" &&
        matches[4] === "0" &&
        matches[5] === "0");
}

//# sourceMappingURL=bqrs-results.js.map
