{
	"name": "MagicPython",
	"scopeName": "source.bazel",
	"fileTypes": [
		"py",
		"py3",
		"rpy",
		"pyw",
		"cpy",
		"SConstruct",
		"Sconstruct",
		"sconstruct",
		"SConscript",
		"gyp",
		"gypi"
	],
	"first_line_match": "^#!/.*\\bbazel[\\d\\.]*\\b",
	"firstLineMatch": "^#!/.*\\bbazel[\\d\\.]*\\b",
	"uuid": "742deb57-6e38-4192-bed6-410746efd85d",
	"patterns": [
		{
			"include": "#statement"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"statement": {
			"patterns": [
				{
					"include": "#import"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#statement-keyword"
				},
				{
					"include": "#assignment-operator"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#docstring-statement"
				},
				{
					"include": "#semicolon"
				}
			]
		},
		"semicolon": {
			"patterns": [
				{
					"name": "invalid.deprecated.semicolon.bazel",
					"match": "\\;$"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.bazel",
					"contentName": "meta.typehint.comment.bazel",
					"begin": "(?x)\n  (?:\n    \\# \\s* (type:)\n    \\s*+ (?# we want `\\s*+` which is possessive quantifier since\n             we do not actually want to backtrack when matching\n             whitespace here)\n    (?! $ | \\#)\n  )\n",
					"end": "(?:$|(?=\\#))",
					"beginCaptures": {
						"0": {
							"name": "meta.typehint.comment.bazel"
						},
						"1": {
							"name": "comment.typehint.directive.notation.bazel"
						}
					},
					"patterns": [
						{
							"name": "comment.typehint.ignore.notation.bazel",
							"match": "(?x)\n  \\G ignore\n  (?= \\s* (?: $ | \\#))\n"
						},
						{
							"name": "comment.typehint.type.notation.bazel",
							"match": "(?x)\n  (?<!\\.)\\b(\n    bool | bytes | float | int | object | str\n    | List | Dict | Iterable | Sequence | Set\n    | FrozenSet | Callable | Union | Tuple\n    | Any | None\n  )\\b\n"
						},
						{
							"name": "comment.typehint.punctuation.notation.bazel",
							"match": "([\\[\\]\\(\\),\\.\\=\\*]|(->))"
						},
						{
							"name": "comment.typehint.variable.notation.bazel",
							"match": "([[:alpha:]_]\\w*)"
						}
					]
				},
				{
					"include": "#comments-base"
				}
			]
		},
		"docstring-statement": {
			"begin": "^(?=\\s*[rR]?(\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))",
			"end": "(?<=\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\")",
			"patterns": [
				{
					"include": "#docstring"
				}
			]
		},
		"docstring": {
			"patterns": [
				{
					"name": "string.quoted.docstring.multi.bazel",
					"begin": "(\\'\\'\\'|\\\"\\\"\\\")",
					"end": "(\\1)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.bazel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.bazel"
						}
					},
					"patterns": [
						{
							"include": "#docstring-prompt"
						},
						{
							"include": "#codetags"
						},
						{
							"include": "#docstring-guts-unicode"
						}
					]
				},
				{
					"name": "string.quoted.docstring.raw.multi.bazel",
					"begin": "([rR])(\\'\\'\\'|\\\"\\\"\\\")",
					"end": "(\\2)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.string.bazel"
						},
						"2": {
							"name": "punctuation.definition.string.begin.bazel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.bazel"
						}
					},
					"patterns": [
						{
							"include": "#string-consume-escape"
						},
						{
							"include": "#docstring-prompt"
						},
						{
							"include": "#codetags"
						}
					]
				},
				{
					"name": "string.quoted.docstring.single.bazel",
					"begin": "(\\'|\\\")",
					"end": "(\\1)|((?<!\\\\)\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.bazel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.bazel"
						},
						"2": {
							"name": "invalid.illegal.newline.bazel"
						}
					},
					"patterns": [
						{
							"include": "#codetags"
						},
						{
							"include": "#docstring-guts-unicode"
						}
					]
				},
				{
					"name": "string.quoted.docstring.raw.single.bazel",
					"begin": "([rR])(\\'|\\\")",
					"end": "(\\2)|((?<!\\\\)\\n)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.string.bazel"
						},
						"2": {
							"name": "punctuation.definition.string.begin.bazel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.bazel"
						},
						"2": {
							"name": "invalid.illegal.newline.bazel"
						}
					},
					"patterns": [
						{
							"include": "#string-consume-escape"
						},
						{
							"include": "#codetags"
						}
					]
				}
			]
		},
		"docstring-guts-unicode": {
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				}
			]
		},
		"docstring-prompt": {
			"match": "(?x)\n  (?:\n    (?:^|\\G) \\s* (?# '\\G' is necessary for ST)\n    ((?:>>>|\\.\\.\\.) \\s) (?=\\s*\\S)\n  )\n",
			"captures": {
				"1": {
					"name": "keyword.control.flow.bazel"
				}
			}
		},
		"codetags": {
			"match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
			"captures": {
				"1": {
					"name": "keyword.codetag.notation.bazel"
				}
			}
		},
		"statement-keyword": {
			"patterns": [
				{
					"name": "storage.type.function.bazel",
					"match": "\\b((async\\s+)?\\s*def)\\b"
				},
				{
					"name": "keyword.control.flow.bazel",
					"match": "(?x)\n  \\b(?<!\\.)(\n    as | async | continue | del | assert | break | finally | for\n    | from | elif | else | if | except | pass | raise\n    | return | try | while | with\n  )\\b\n"
				},
				{
					"name": "storage.modifier.declaration.bazel",
					"match": "(?x)\n  \\b(?<!\\.)(\n    global | nonlocal\n  )\\b\n"
				},
				{
					"name": "storage.type.class.bazel",
					"match": "\\b(?<!\\.)(class)\\b"
				}
			]
		},
		"expression-base": {
			"comment": "All valid Python expressions",
			"patterns": [
				{
					"include": "#backticks"
				},
				{
					"include": "#illegal-anno"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#regexp"
				},
				{
					"include": "#string"
				},
				{
					"include": "#lambda"
				},
				{
					"include": "#illegal-operator"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#curly-braces"
				},
				{
					"include": "#item-access"
				},
				{
					"include": "#list"
				},
				{
					"include": "#round-braces"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				},
				{
					"include": "#builtin-exceptions"
				},
				{
					"include": "#magic-names"
				},
				{
					"include": "#special-names"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#special-variables"
				},
				{
					"include": "#line-continuation"
				},
				{
					"include": "#ellipsis"
				}
			]
		},
		"expression": {
			"comment": "All valid Python expressions",
			"patterns": [
				{
					"include": "#expression-base"
				},
				{
					"include": "#member-access"
				},
				{
					"comment": "Tokenize identifiers to help linters",
					"match": "(?x) \\b ([[:alpha:]_]\\w*) \\b"
				}
			]
		},
		"member-access": {
			"begin": "\\.\\s*(?!\\.)",
			"end": "(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?<=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?<=\\s))(?=[^\\\\\\w\\s]) |\n  $\n",
			"patterns": [
				{
					"include": "#function-call"
				},
				{
					"include": "#member-access-base"
				}
			]
		},
		"member-access-base": {
			"patterns": [
				{
					"include": "#magic-names"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#special-names"
				},
				{
					"include": "#line-continuation"
				},
				{
					"include": "#item-access"
				}
			]
		},
		"special-names": {
			"name": "constant.other.caps.bazel",
			"match": "(?x)\n  \\b\n    (\n      _* [[:upper:]]\n    )\n    [[:upper:]\\d]* (_\\w*)?\n  \\b\n"
		},
		"curly-braces": {
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dict.begin.bazel"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dict.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"list": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.list.begin.bazel"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.list.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"round-braces": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.bazel"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"line-continuation": {
			"patterns": [
				{
					"match": "(\\\\)\\s*(\\S.*$\\n?)",
					"captures": {
						"1": {
							"name": "separator.continuation.line.bazel"
						},
						"2": {
							"name": "invalid.illegal.line.continuation.bazel"
						}
					}
				},
				{
					"begin": "(\\\\)\\s*$\\n?",
					"end": "(?x)\n  (?=^\\s*$)\n  |\n  (?! (\\s* [rR]? (\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))\n      |\n      (\\G $)  (?# '\\G' is necessary for ST)\n  )\n",
					"beginCaptures": {
						"1": {
							"name": "separator.continuation.line.bazel"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						},
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"assignment-operator": {
			"name": "keyword.operator.assignment.bazel",
			"match": "(?x)\n     <<= | >>= | //= | \\*\\*=\n    | \\+= | -= | /= | @=\n    | \\*= | %= | ~= | \\^= | &= | \\|=\n    | =(?!=)\n"
		},
		"operator": {
			"match": "(?x)\n    \\b(?<!\\.)\n      (?:\n        (and | or | not | in | is)                         (?# 1)\n        |\n        (for | if | else | await | (?:yield(?:\\s+from)?))  (?# 2)\n      )\n    (?!\\s*:)\\b\n\n    | (<< | >> | & | \\| | \\^ | ~)                          (?# 3)\n\n    | (\\*\\* | \\* | \\+ | - | % | // | / | @)                (?# 4)\n\n    | (!= | == | >= | <= | < | >)                          (?# 5)\n",
			"captures": {
				"1": {
					"name": "keyword.operator.logical.bazel"
				},
				"2": {
					"name": "keyword.control.flow.bazel"
				},
				"3": {
					"name": "keyword.operator.bitwise.bazel"
				},
				"4": {
					"name": "keyword.operator.arithmetic.bazel"
				},
				"5": {
					"name": "keyword.operator.comparison.bazel"
				}
			}
		},
		"literal": {
			"patterns": [
				{
					"name": "constant.language.bazel",
					"match": "\\b(True|False|None|NotImplemented|Ellipsis)\\b"
				},
				{
					"include": "#number"
				}
			]
		},
		"number": {
			"name": "constant.numeric.bazel",
			"patterns": [
				{
					"include": "#number-float"
				},
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-oct"
				},
				{
					"include": "#number-bin"
				},
				{
					"include": "#number-long"
				},
				{
					"name": "invalid.illegal.name.bazel",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"number-float": {
			"name": "constant.numeric.float.bazel",
			"match": "(?x)\n  (?<! \\w)(?:\n    [0-9]*\\.[0-9]+ ([eE][+-]?[0-9]+)?\n    | [0-9]+\\. ([eE][+-]?[0-9]+)?\n    | [0-9]+ ([eE][+-]?[0-9]+)\n  )([jJ])?\\b\n",
			"captures": {
				"4": {
					"name": "storage.type.imaginary.number.bazel"
				}
			}
		},
		"number-dec": {
			"name": "constant.numeric.dec.bazel",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9][0-9]*\n      |\n      0+\n      |\n      [0-9]+ ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.bazel"
				},
				"2": {
					"name": "invalid.illegal.dec.bazel"
				},
				"3": {
					"name": "invalid.illegal.dec.bazel"
				}
			}
		},
		"number-hex": {
			"name": "constant.numeric.hex.bazel",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[xX]) [0-9a-fA-F]+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.bazel"
				}
			}
		},
		"number-oct": {
			"name": "constant.numeric.oct.bazel",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[oO]) [0-7]+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.bazel"
				}
			}
		},
		"number-bin": {
			"name": "constant.numeric.bin.bazel",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[bB]) [01]+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.bazel"
				}
			}
		},
		"number-long": {
			"name": "constant.numeric.bin.bazel",
			"comment": "this is to support bazel2 syntax for long ints",
			"match": "(?x)\n  (?<![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n",
			"captures": {
				"2": {
					"name": "storage.type.number.bazel"
				}
			}
		},
		"regexp": {
			"patterns": [
				{
					"include": "#regexp-single-quoted-multi-line"
				},
				{
					"include": "#regexp-double-quoted-multi-line"
				},
				{
					"include": "#regexp-single-quoted-single-line"
				},
				{
					"include": "#regexp-double-quoted-single-line"
				}
			]
		},
		"regexp-single-quoted-single-line": {
			"name": "string.regexp.quoted.single.bazel",
			"begin": "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\')",
			"end": "(\\')|(?<!\\\\)(\\n)",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.bazel"
				},
				"3": {
					"name": "storage.type.string.bazel"
				},
				"4": {
					"name": "storage.type.string.bazel"
				},
				"5": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"regexp-double-quoted-single-line": {
			"name": "string.regexp.quoted.single.bazel",
			"begin": "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\")",
			"end": "(\\\")|(?<!\\\\)(\\n)",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.bazel"
				},
				"3": {
					"name": "storage.type.string.bazel"
				},
				"4": {
					"name": "storage.type.string.bazel"
				},
				"5": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"regexp-single-quoted-multi-line": {
			"name": "string.regexp.quoted.multi.bazel",
			"begin": "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\'\\'\\')",
			"end": "\\'\\'\\'",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.bazel"
				},
				"3": {
					"name": "storage.type.string.bazel"
				},
				"4": {
					"name": "storage.type.string.bazel"
				},
				"5": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				}
			]
		},
		"regexp-double-quoted-multi-line": {
			"name": "string.regexp.quoted.multi.bazel",
			"begin": "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\"\\\"\\\")",
			"end": "\\\"\\\"\\\"",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.bazel"
				},
				"3": {
					"name": "storage.type.string.bazel"
				},
				"4": {
					"name": "storage.type.string.bazel"
				},
				"5": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"include": "#string-quoted-multi-line"
				},
				{
					"include": "#string-quoted-single-line"
				},
				{
					"include": "#string-bin-quoted-multi-line"
				},
				{
					"include": "#string-bin-quoted-single-line"
				},
				{
					"include": "#string-raw-quoted-multi-line"
				},
				{
					"include": "#string-raw-quoted-single-line"
				},
				{
					"include": "#string-raw-bin-quoted-multi-line"
				},
				{
					"include": "#string-raw-bin-quoted-single-line"
				}
			]
		},
		"string-unicode-guts": {
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#string-entity"
				},
				{
					"include": "#string-brace-formatting"
				}
			]
		},
		"string-consume-escape": {
			"match": "\\\\['\"\\n\\\\]"
		},
		"string-raw-guts": {
			"patterns": [
				{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				},
				{
					"include": "#string-brace-formatting"
				}
			]
		},
		"string-raw-bin-guts": {
			"patterns": [
				{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				}
			]
		},
		"string-entity": {
			"patterns": [
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				},
				{
					"include": "#string-formatting"
				}
			]
		},
		"escape-sequence-unicode": {
			"patterns": [
				{
					"name": "constant.character.escape.bazel",
					"match": "(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n        | N\\{[\\w\\s]+?\\}\n     )\n"
				}
			]
		},
		"escape-sequence": {
			"name": "constant.character.escape.bazel",
			"match": "(?x)\n  \\\\ (\n        x[0-9A-Fa-f]{2}\n        | [0-7]{1,3}\n        | [\\\\\"'abfnrtv]\n     )\n"
		},
		"string-line-continuation": {
			"name": "constant.language.bazel",
			"match": "\\\\$"
		},
		"string-formatting": {
			"name": "constant.character.format.placeholder.other.bazel",
			"match": "(?x)\n  % (\\([\\w\\s]*\\))?\n    [-+#0 ]*\n    (\\d+|\\*)? (\\.(\\d+|\\*))?\n    ([hlL])?\n    [diouxXeEfFgGcrsa%]\n"
		},
		"string-brace-formatting": {
			"patterns": [
				{
					"name": "constant.character.format.placeholder.other.bazel",
					"match": "(?x)\n  (?:\n    {{ | }}\n    | (?:\n      {\n        \\w*? (\\.[[:alpha:]_]\\w*? | \\[[^\\]'\"]+\\])*?\n        (![rsa])?\n        ( : \\w? [<>=^]? [-+ ]? \\#?\n          \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )?\n      })\n  )\n",
					"captures": {
						"2": {
							"name": "storage.type.format.bazel"
						},
						"3": {
							"name": "support.other.format.bazel"
						}
					}
				},
				{
					"name": "constant.character.format.placeholder.other.bazel",
					"begin": "(?x)\n    \\{\n      \\w*? (\\.[[:alpha:]_]\\w*? | \\[[^\\]'\"]+\\])*?\n      (![rsa])?\n      (:)\n        (?=[^'\"}\\n]*\\})\n",
					"end": "\\}",
					"beginCaptures": {
						"2": {
							"name": "storage.type.format.bazel"
						},
						"3": {
							"name": "support.other.format.bazel"
						}
					},
					"patterns": [
						{
							"match": "(?x) \\{ [^'\"}\\n]*? \\} (?=.*?\\})\n"
						}
					]
				}
			]
		},
		"import": {
			"comment": "Import statements\n",
			"patterns": [
				{
					"match": "(?x)\n  \\s* \\b(from)\\b (\\s*\\.+\\s*) (import)?\n",
					"captures": {
						"1": {
							"name": "keyword.control.import.bazel"
						},
						"3": {
							"name": "keyword.control.import.bazel"
						}
					}
				},
				{
					"name": "keyword.control.import.bazel",
					"match": "\\b(?<!\\.)import\\b"
				}
			]
		},
		"class-declaration": {
			"patterns": [
				{
					"name": "meta.class.bazel",
					"begin": "(?x)\n  \\s*(class)\\s+\n    (?=\n      [[:alpha:]_]\\w* \\s* (:|\\()\n    )\n",
					"end": "(:)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.bazel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.section.class.begin.bazel"
						}
					},
					"patterns": [
						{
							"include": "#class-name"
						},
						{
							"include": "#class-inheritance"
						}
					]
				}
			]
		},
		"class-name": {
			"patterns": [
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#builtin-possible-callables"
				},
				{
					"name": "entity.name.type.class.bazel",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"class-inheritance": {
			"name": "meta.class.inheritance.bazel",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.inheritance.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.inheritance.end.bazel"
				}
			},
			"patterns": [
				{
					"name": "keyword.operator.unpacking.arguments.bazel",
					"match": "(\\*\\*|\\*)"
				},
				{
					"name": "punctuation.separator.inheritance.bazel",
					"match": ","
				},
				{
					"name": "keyword.operator.assignment.bazel",
					"match": "=(?!=)"
				},
				{
					"include": "#expression-class"
				},
				{
					"name": "support.type.metaclass.bazel",
					"match": "\\bmetaclass\\b"
				},
				{
					"include": "#inheritance-identifier"
				}
			]
		},
		"inheritance-identifier": {
			"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n",
			"captures": {
				"1": {
					"name": "entity.other.inherited-class.bazel"
				}
			}
		},
		"expression-class": {
			"patterns": [
				{
					"include": "#call-wrapper-inheritance"
				},
				{
					"include": "#expression-base"
				},
				{
					"include": "#member-access-class"
				}
			]
		},
		"member-access-class": {
			"begin": "\\.\\s*(?!\\.)",
			"end": "(?<=\\S)(?=\\W)|$",
			"patterns": [
				{
					"include": "#call-wrapper-inheritance"
				},
				{
					"include": "#member-access-base"
				},
				{
					"include": "#inheritance-identifier"
				}
			]
		},
		"lambda": {
			"patterns": [
				{
					"match": "((?<=\\.)lambda|lambda(?=\\s*[\\.=]))",
					"captures": {
						"1": {
							"name": "keyword.control.flow.bazel"
						}
					}
				},
				{
					"match": "\\b(lambda)\\s*?([,\\n]|$)",
					"captures": {
						"1": {
							"name": "storage.type.function.lambda.bazel"
						}
					}
				},
				{
					"name": "meta.lambda-function.bazel",
					"begin": "(?x)\n  \\b (lambda) \\b\n",
					"end": "(:)|(\\n)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.lambda.bazel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.section.function.lambda.begin.bazel"
						}
					},
					"contentName": "meta.function.lambda.parameters.bazel",
					"patterns": [
						{
							"name": "keyword.operator.unpacking.parameter.bazel",
							"match": "(\\*\\*|\\*)"
						},
						{
							"include": "#lambda-incomplete"
						},
						{
							"include": "#illegal-names"
						},
						{
							"match": "([[:alpha:]_]\\w*)\\s*(?:(,)|(?=:|$))",
							"captures": {
								"1": {
									"name": "variable.parameter.function.language.bazel"
								},
								"2": {
									"name": "punctuation.separator.parameters.bazel"
								}
							}
						},
						{
							"include": "#comments"
						},
						{
							"include": "#backticks"
						},
						{
							"include": "#illegal-anno"
						},
						{
							"include": "#lambda-parameter-with-default"
						},
						{
							"include": "#line-continuation"
						},
						{
							"include": "#illegal-operator"
						}
					]
				}
			]
		},
		"lambda-incomplete": {
			"name": "storage.type.function.lambda.bazel",
			"match": "\\blambda(?=\\s*[:,)])"
		},
		"lambda-parameter-with-default": {
			"begin": "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (=)\n",
			"end": "(,)|(?=:|$)",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter.function.language.bazel"
				},
				"2": {
					"name": "keyword.operator.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameters.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.bazel",
			"begin": "(?x)\n  \\s*\n  (?:\\b(async) \\s+)? \\b(def)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n",
			"end": "(:|(?=[#'\"\\n]))",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.async.bazel"
				},
				"2": {
					"name": "storage.type.function.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.begin.bazel"
				}
			},
			"patterns": [
				{
					"include": "#function-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#line-continuation"
				},
				{
					"include": "#return-annotation"
				}
			]
		},
		"function-def-name": {
			"patterns": [
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#builtin-possible-callables"
				},
				{
					"name": "entity.name.function.bazel",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"parameters": {
			"name": "meta.function.parameters.bazel",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.end.bazel"
				}
			},
			"patterns": [
				{
					"name": "keyword.operator.unpacking.parameter.bazel",
					"match": "(\\*\\*|\\*)"
				},
				{
					"include": "#lambda-incomplete"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#parameter-special"
				},
				{
					"match": "(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n",
					"captures": {
						"1": {
							"name": "variable.parameter.function.language.bazel"
						},
						"2": {
							"name": "punctuation.separator.parameters.bazel"
						}
					}
				},
				{
					"include": "#comments"
				},
				{
					"include": "#loose-default"
				},
				{
					"include": "#annotated-parameter"
				}
			]
		},
		"parameter-special": {
			"match": "(?x)\n  \\b ((self)|(cls)) \\b \\s*(?:(,)|(?=\\)))\n",
			"captures": {
				"1": {
					"name": "variable.parameter.function.language.bazel"
				},
				"2": {
					"name": "variable.parameter.function.language.special.self.bazel"
				},
				"3": {
					"name": "variable.parameter.function.language.special.cls.bazel"
				},
				"4": {
					"name": "punctuation.separator.parameters.bazel"
				}
			}
		},
		"loose-default": {
			"begin": "(=)",
			"end": "(,)|(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameters.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"annotated-parameter": {
			"begin": "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n",
			"end": "(,)|(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter.function.language.bazel"
				},
				"2": {
					"name": "punctuation.separator.annotation.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameters.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"name": "keyword.operator.assignment.bazel",
					"match": "=(?!=)"
				}
			]
		},
		"return-annotation": {
			"begin": "(->)",
			"end": "(?=:)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.annotation.result.bazel"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"item-access": {
			"patterns": [
				{
					"name": "meta.item-access.bazel",
					"begin": "(?x)\n  \\b(?=\n    [[:alpha:]_]\\w* \\s* \\[\n  )\n",
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.arguments.end.bazel"
						}
					},
					"patterns": [
						{
							"include": "#item-name"
						},
						{
							"include": "#item-index"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"item-name": {
			"patterns": [
				{
					"include": "#special-variables"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#special-names"
				},
				{
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"item-index": {
			"begin": "(\\[)",
			"end": "(?=\\])",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.bazel"
				}
			},
			"contentName": "meta.item-access.arguments.bazel",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"decorator": {
			"name": "meta.function.decorator.bazel",
			"begin": "(?x)\n  ^\\s*\n  (@) \\s* (?=[[:alpha:]_]\\w*)\n",
			"end": "(?x)\n  ( \\) ) (?: (?=\\s*\\#|$) | (.*$) )\n  | (?=\\n|\\#)\n",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.decorator.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.decorator.bazel"
				}
			},
			"patterns": [
				{
					"include": "#decorator-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"decorator-name": {
			"patterns": [
				{
					"include": "#builtin-callables"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"name": "entity.name.function.decorator.bazel",
					"match": "(?x)\n  ([[:alpha:]_]\\w*) | \\.\n"
				},
				{
					"include": "#line-continuation"
				},
				{
					"name": "invalid.illegal.decorator.bazel",
					"match": "(?x)\n  \\s* ([^([:alpha:]\\s_\\.#\\\\] .*?) (?=\\#|$)\n",
					"captures": {
						"1": {
							"name": "invalid.illegal.decorator.bazel"
						}
					}
				}
			]
		},
		"call-wrapper-inheritance": {
			"comment": "same as a funciton call, but in inheritance context",
			"name": "meta.function-call.bazel",
			"begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#inheritance-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"inheritance-name": {
			"patterns": [
				{
					"include": "#lambda-incomplete"
				},
				{
					"include": "#builtin-possible-callables"
				},
				{
					"include": "#inheritance-identifier"
				}
			]
		},
		"function-call": {
			"name": "meta.function-call.bazel",
			"begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.bazel"
				}
			},
			"patterns": [
				{
					"include": "#special-variables"
				},
				{
					"include": "#function-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"include": "#builtin-possible-callables"
				},
				{
					"comment": "Some color schemas support meta.function-call.generic scope",
					"name": "meta.function-call.generic.bazel",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"function-arguments": {
			"begin": "(?x)\n  (?:\n    (\\()\n    (?:\\s*(\\*\\*|\\*))?\n  )\n",
			"end": "(?=\\))(?!\\)\\s*\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.bazel"
				},
				"2": {
					"name": "keyword.operator.unpacking.arguments.bazel"
				}
			},
			"contentName": "meta.function-call.arguments.bazel",
			"patterns": [
				{
					"match": "(?x)\n  (?:\n    (,)\n    (?:\\s*(\\*\\*|\\*))?\n  )\n",
					"captures": {
						"1": {
							"name": "punctuation.separator.arguments.bazel"
						},
						"2": {
							"name": "keyword.operator.unpacking.arguments.bazel"
						}
					}
				},
				{
					"include": "#lambda-incomplete"
				},
				{
					"include": "#illegal-names"
				},
				{
					"match": "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)",
					"captures": {
						"1": {
							"name": "variable.parameter.function-call.bazel"
						},
						"2": {
							"name": "keyword.operator.assignment.bazel"
						}
					}
				},
				{
					"name": "keyword.operator.assignment.bazel",
					"match": "=(?!=)"
				},
				{
					"include": "#expression"
				},
				{
					"match": "\\s*(\\))\\s*(\\()",
					"captures": {
						"1": {
							"name": "punctuation.definition.arguments.end.bazel"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.bazel"
						}
					}
				}
			]
		},
		"builtin-callables": {
			"patterns": [
				{
					"include": "#illegal-names"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#builtin-exceptions"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				}
			]
		},
		"builtin-possible-callables": {
			"patterns": [
				{
					"include": "#builtin-callables"
				},
				{
					"include": "#magic-names"
				}
			]
		},
		"builtin-exceptions": {
			"name": "support.type.exception.bazel",
			"match": "(?x) (?<!\\.) \\b(\n  (\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\n    | BrokenPipe | ChildProcess\n    | (Connection (Aborted | Refused | Reset)?)\n    | EOF | Environment | FileExists | FileNotFound\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\n    | Timeout\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\n    | Reference | Runtime | Recursion | Syntax | System\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\n    | Value | Windows | ZeroDivision\n  ) Error\n|\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\n    | Unicode | Bytes | Resource\n  )? Warning\n|\n  SystemExit | Stop(Async)?Iteration\n  | KeyboardInterrupt\n  | GeneratorExit | (Base)?Exception\n)\\b\n"
		},
		"builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.bazel",
					"match": "(?x)\n  (?<!\\.) \\b(\n    __import__ | abs | all | any | ascii | bin | callable\n    | chr | compile | copyright | credits | delattr | dir | divmod\n    | enumerate | eval | exec | exit | filter | format | getattr\n    | globals | hasattr | hash | help | hex | id | input\n    | isinstance | issubclass | iter | len | license | locals | map\n    | max | memoryview | min | next | oct | open | ord | pow | print\n    | quit | range | reload | repr | reversed | round\n    | setattr | sorted | sum | vars | zip\n  )\\b\n"
				},
				{
					"name": "variable.legacy.builtin.bazel",
					"match": "(?x)\n  (?<!\\.) \\b(\n    file | reduce | intern | raw_input | unicode | cmp | basestring\n    | execfile | long | xrange\n  )\\b\n"
				}
			]
		},
		"builtin-types": {
			"name": "support.type.bazel",
			"match": "(?x)\n  (?<!\\.) \\b(\n    bool | bytearray | bytes | classmethod | complex | dict\n    | float | frozenset | int | list | object | property\n    | set | slice | staticmethod | str | tuple | type\n\n    (?# Although 'super' is not a type, it's related to types,\n        and is special enough to be highlighted differently from\n        other built-ins)\n    | super\n  )\\b\n"
		},
		"magic-function-names": {
			"comment": "these methods have magic interpretation by bazel and are generally called\nindirectly through syntactic constructs\n",
			"match": "(?x)\n  \\b(\n    __(?:\n      abs | add | aenter | aexit | aiter | and | anext | await\n      | bool | call | ceil | cmp | coerce | complex | contains\n      | copy | deepcopy | del | delattr | delete | delitem\n      | delslice | dir | div | divmod | enter | eq | exit | float\n      | floor | floordiv | format | ge | get | getattr\n      | getattribute | getinitargs | getitem | getnewargs\n      | getslice | getstate | gt | hash | hex | iadd | iand | idiv\n      | ifloordiv | ilshift | imod | imul | index | init\n      | instancecheck | int | invert | ior | ipow | irshift | isub\n      | iter | itruediv | ixor | le | len | long | lshift | lt\n      | missing | mod | mul | ne | neg | new | next | nonzero | oct | or\n      | pos | pow | radd | rand | rdiv | rdivmod | reduce\n      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod\n      | rmul | ror | round | rpow | rrshift | rshift | rsub\n      | rtruediv | rxor | set | setattr | setitem | setslice\n      | setstate | sizeof | str | sub | subclasscheck | truediv\n      | trunc | unicode | xor\n    )__\n  )\\b\n",
			"captures": {
				"1": {
					"name": "support.function.magic.bazel"
				}
			}
		},
		"magic-variable-names": {
			"comment": "magic variables which a class/module may have.",
			"match": "(?x)\n  \\b(\n    __(?:\n      all | bases | builtins | class | code | debug | defaults | dict\n      | doc | file | func | kwdefaults | members\n      | metaclass | methods | module | mro | name\n      | qualname | self | signature | slots | subclasses\n      | version | weakref | wrapped\n    )__\n  )\\b\n",
			"captures": {
				"1": {
					"name": "support.variable.magic.bazel"
				}
			}
		},
		"magic-names": {
			"patterns": [
				{
					"include": "#magic-function-names"
				},
				{
					"include": "#magic-variable-names"
				}
			]
		},
		"illegal-names": {
			"name": "keyword.control.flow.bazel",
			"match": "(?x)\n  \\b(\n    and | as | assert | async | await | break | class | continue | def\n    | del | elif | else | except | exec | finally | for | from | global\n    | if | import | in | is | (?<=\\.)lambda | lambda(?=\\s*[\\.=])\n    | nonlocal | not | or | pass | raise | return | try | while | with\n    | yield\n  )\\b\n"
		},
		"special-variables": {
			"match": "(?x)\n  \\b (?<!\\.) (?:\n    (self) | (cls)\n  )\\b\n",
			"captures": {
				"1": {
					"name": "variable.language.special.self.bazel"
				},
				"2": {
					"name": "variable.language.special.cls.bazel"
				}
			}
		},
		"ellipsis": {
			"name": "constant.other.ellipsis.bazel",
			"match": "\\.\\.\\."
		},
		"backticks": {
			"name": "invalid.deprecated.backtick.bazel",
			"begin": "\\`",
			"end": "(?:\\`|(?<!\\\\)(\\n))",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"illegal-operator": {
			"patterns": [
				{
					"name": "invalid.illegal.operator.bazel",
					"match": "&&|\\|\\||--|\\+\\+"
				},
				{
					"name": "invalid.illegal.operator.bazel",
					"match": "[?$]"
				},
				{
					"name": "invalid.illegal.operator.bazel",
					"comment": "We don't want `!` to flash when we're typing `!=`",
					"match": "!\\b"
				}
			]
		},
		"illegal-object-name": {
			"comment": "It's illegal to name class or function \"True\"",
			"name": "keyword.illegal.name.bazel",
			"match": "\\b(True|False|None)\\b"
		},
		"illegal-anno": {
			"name": "invalid.illegal.annotation.bazel",
			"match": "->"
		},
		"regexp-base-expression": {
			"patterns": [
				{
					"name": "support.other.match.any.regexp",
					"match": "\\."
				},
				{
					"name": "support.other.match.begin.regexp",
					"match": "\\^"
				},
				{
					"name": "support.other.match.end.regexp",
					"match": "\\$"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[+*?]\\??"
				},
				{
					"name": "keyword.operator.disjunction.regexp",
					"match": "\\|"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "(?x)\n  \\{(\n    \\d+ | \\d+,(\\d+)? | ,\\d+\n  )\\}\n"
				},
				{
					"include": "#regexp-escape-sequence"
				}
			]
		},
		"regexp-backreference-number": {
			"name": "meta.backreference.regexp",
			"match": "(\\\\[1-9]\\d?)",
			"captures": {
				"1": {
					"name": "entity.name.tag.backreference.regexp"
				}
			}
		},
		"regexp-backreference": {
			"name": "meta.backreference.named.regexp",
			"match": "(?x)\n  (\\()  (\\?P= \\w+(?:\\s+[[:alnum:]]+)?)  (\\))\n",
			"captures": {
				"1": {
					"name": "punctuation.parenthesis.backreference.named.begin.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "entity.name.tag.named.backreference.regexp"
				},
				"3": {
					"name": "punctuation.parenthesis.backreference.named.end.regexp support.other.parenthesis.regexp"
				}
			}
		},
		"regexp-flags": {
			"name": "storage.modifier.flag.regexp",
			"match": "\\(\\?[aiLmsux]+\\)"
		},
		"regexp-escape-special": {
			"name": "support.other.escape.special.regexp",
			"match": "\\\\([AbBdDsSwWZ])"
		},
		"regexp-escape-character": {
			"name": "constant.character.escape.regexp",
			"match": "(?x)\n  \\\\ (\n        x[0-9A-Fa-f]{2}\n        | 0[0-7]{1,2}\n        | [0-7]{3}\n     )\n"
		},
		"regexp-escape-unicode": {
			"name": "constant.character.unicode.regexp",
			"match": "(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n     )\n"
		},
		"regexp-escape-catchall": {
			"name": "constant.character.escape.regexp",
			"match": "\\\\(.|\\n)"
		},
		"regexp-escape-sequence": {
			"patterns": [
				{
					"include": "#regexp-escape-special"
				},
				{
					"include": "#regexp-escape-character"
				},
				{
					"include": "#regexp-escape-unicode"
				},
				{
					"include": "#regexp-backreference-number"
				},
				{
					"include": "#regexp-escape-catchall"
				}
			]
		},
		"regexp-charecter-set-escapes": {
			"patterns": [
				{
					"name": "constant.character.escape.regexp",
					"match": "\\\\[abfnrtv\\\\]"
				},
				{
					"include": "#regexp-escape-special"
				},
				{
					"name": "constant.character.escape.regexp",
					"match": "\\\\([0-7]{1,3})"
				},
				{
					"include": "#regexp-escape-character"
				},
				{
					"include": "#regexp-escape-unicode"
				},
				{
					"include": "#regexp-escape-catchall"
				}
			]
		},
		"comments-base": {
			"name": "comment.line.number-sign.bazel",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.bazel"
				}
			},
			"end": "($)",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"comments-string-single-three": {
			"name": "comment.line.number-sign.bazel",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.bazel"
				}
			},
			"end": "($|(?='''))",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"comments-string-double-three": {
			"name": "comment.line.number-sign.bazel",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.bazel"
				}
			},
			"end": "($|(?=\"\"\"))",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"single-one-regexp-expression": {
			"patterns": [
				{
					"include": "#regexp-base-expression"
				},
				{
					"include": "#single-one-regexp-character-set"
				},
				{
					"include": "#single-one-regexp-comments"
				},
				{
					"include": "#regexp-flags"
				},
				{
					"include": "#single-one-regexp-named-group"
				},
				{
					"include": "#regexp-backreference"
				},
				{
					"include": "#single-one-regexp-lookahead"
				},
				{
					"include": "#single-one-regexp-lookahead-negative"
				},
				{
					"include": "#single-one-regexp-lookbehind"
				},
				{
					"include": "#single-one-regexp-lookbehind-negative"
				},
				{
					"include": "#single-one-regexp-conditional"
				},
				{
					"include": "#single-one-regexp-parentheses-non-capturing"
				},
				{
					"include": "#single-one-regexp-parentheses"
				}
			]
		},
		"single-one-regexp-character-set": {
			"patterns": [
				{
					"match": "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"
				},
				{
					"name": "meta.character.set.regexp",
					"begin": "(\\[)(\\^)?(\\])?",
					"end": "(\\]|(?=\\'))|((?=(?<!\\\\)\\n))",
					"beginCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.begin.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						},
						"3": {
							"name": "constant.character.set.regexp"
						}
					},
					"endCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.end.regexp"
						},
						"2": {
							"name": "invalid.illegal.newline.bazel"
						}
					},
					"patterns": [
						{
							"include": "#regexp-charecter-set-escapes"
						},
						{
							"name": "constant.character.set.regexp",
							"match": "[^\\n]"
						}
					]
				}
			]
		},
		"single-one-regexp-named-group": {
			"name": "meta.named.regexp",
			"begin": "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.begin.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "entity.name.tag.named.group.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-comments": {
			"name": "comment.regexp",
			"begin": "\\(\\?#",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.comment.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.comment.end.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"single-one-regexp-lookahead": {
			"begin": "(\\()\\?=",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-lookahead-negative": {
			"begin": "(\\()\\?!",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-lookbehind": {
			"begin": "(\\()\\?<=",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-lookbehind-negative": {
			"begin": "(\\()\\?<!",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-conditional": {
			"begin": "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.conditional.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.conditional.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.conditional.end.regexp keyword.operator.conditional.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-parentheses-non-capturing": {
			"begin": "\\(\\?:",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.non-capturing.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.non-capturing.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-one-regexp-parentheses": {
			"begin": "\\(",
			"end": "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-one-regexp-expression"
				}
			]
		},
		"single-three-regexp-expression": {
			"patterns": [
				{
					"include": "#regexp-base-expression"
				},
				{
					"include": "#single-three-regexp-character-set"
				},
				{
					"include": "#single-three-regexp-comments"
				},
				{
					"include": "#regexp-flags"
				},
				{
					"include": "#single-three-regexp-named-group"
				},
				{
					"include": "#regexp-backreference"
				},
				{
					"include": "#single-three-regexp-lookahead"
				},
				{
					"include": "#single-three-regexp-lookahead-negative"
				},
				{
					"include": "#single-three-regexp-lookbehind"
				},
				{
					"include": "#single-three-regexp-lookbehind-negative"
				},
				{
					"include": "#single-three-regexp-conditional"
				},
				{
					"include": "#single-three-regexp-parentheses-non-capturing"
				},
				{
					"include": "#single-three-regexp-parentheses"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-character-set": {
			"patterns": [
				{
					"match": "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"
				},
				{
					"name": "meta.character.set.regexp",
					"begin": "(\\[)(\\^)?(\\])?",
					"end": "(\\]|(?=\\'\\'\\'))",
					"beginCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.begin.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						},
						"3": {
							"name": "constant.character.set.regexp"
						}
					},
					"endCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.end.regexp"
						},
						"2": {
							"name": "invalid.illegal.newline.bazel"
						}
					},
					"patterns": [
						{
							"include": "#regexp-charecter-set-escapes"
						},
						{
							"name": "constant.character.set.regexp",
							"match": "[^\\n]"
						}
					]
				}
			]
		},
		"single-three-regexp-named-group": {
			"name": "meta.named.regexp",
			"begin": "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.begin.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "entity.name.tag.named.group.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-comments": {
			"name": "comment.regexp",
			"begin": "\\(\\?#",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.comment.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.comment.end.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"single-three-regexp-lookahead": {
			"begin": "(\\()\\?=",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-lookahead-negative": {
			"begin": "(\\()\\?!",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-lookbehind": {
			"begin": "(\\()\\?<=",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-lookbehind-negative": {
			"begin": "(\\()\\?<!",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-conditional": {
			"begin": "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.conditional.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.conditional.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.conditional.end.regexp keyword.operator.conditional.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-parentheses-non-capturing": {
			"begin": "\\(\\?:",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.non-capturing.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.non-capturing.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"single-three-regexp-parentheses": {
			"begin": "\\(",
			"end": "(\\)|(?=\\'\\'\\'))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#single-three-regexp-expression"
				},
				{
					"include": "#comments-string-single-three"
				}
			]
		},
		"double-one-regexp-expression": {
			"patterns": [
				{
					"include": "#regexp-base-expression"
				},
				{
					"include": "#double-one-regexp-character-set"
				},
				{
					"include": "#double-one-regexp-comments"
				},
				{
					"include": "#regexp-flags"
				},
				{
					"include": "#double-one-regexp-named-group"
				},
				{
					"include": "#regexp-backreference"
				},
				{
					"include": "#double-one-regexp-lookahead"
				},
				{
					"include": "#double-one-regexp-lookahead-negative"
				},
				{
					"include": "#double-one-regexp-lookbehind"
				},
				{
					"include": "#double-one-regexp-lookbehind-negative"
				},
				{
					"include": "#double-one-regexp-conditional"
				},
				{
					"include": "#double-one-regexp-parentheses-non-capturing"
				},
				{
					"include": "#double-one-regexp-parentheses"
				}
			]
		},
		"double-one-regexp-character-set": {
			"patterns": [
				{
					"match": "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"
				},
				{
					"name": "meta.character.set.regexp",
					"begin": "(\\[)(\\^)?(\\])?",
					"end": "(\\]|(?=\"))|((?=(?<!\\\\)\\n))",
					"beginCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.begin.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						},
						"3": {
							"name": "constant.character.set.regexp"
						}
					},
					"endCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.end.regexp"
						},
						"2": {
							"name": "invalid.illegal.newline.bazel"
						}
					},
					"patterns": [
						{
							"include": "#regexp-charecter-set-escapes"
						},
						{
							"name": "constant.character.set.regexp",
							"match": "[^\\n]"
						}
					]
				}
			]
		},
		"double-one-regexp-named-group": {
			"name": "meta.named.regexp",
			"begin": "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.begin.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "entity.name.tag.named.group.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-comments": {
			"name": "comment.regexp",
			"begin": "\\(\\?#",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.comment.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.comment.end.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"double-one-regexp-lookahead": {
			"begin": "(\\()\\?=",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-lookahead-negative": {
			"begin": "(\\()\\?!",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-lookbehind": {
			"begin": "(\\()\\?<=",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-lookbehind-negative": {
			"begin": "(\\()\\?<!",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-conditional": {
			"begin": "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.conditional.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.conditional.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.conditional.end.regexp keyword.operator.conditional.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-parentheses-non-capturing": {
			"begin": "\\(\\?:",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.non-capturing.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.non-capturing.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-one-regexp-parentheses": {
			"begin": "\\(",
			"end": "(\\)|(?=\"))|((?=(?<!\\\\)\\n))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-one-regexp-expression"
				}
			]
		},
		"double-three-regexp-expression": {
			"patterns": [
				{
					"include": "#regexp-base-expression"
				},
				{
					"include": "#double-three-regexp-character-set"
				},
				{
					"include": "#double-three-regexp-comments"
				},
				{
					"include": "#regexp-flags"
				},
				{
					"include": "#double-three-regexp-named-group"
				},
				{
					"include": "#regexp-backreference"
				},
				{
					"include": "#double-three-regexp-lookahead"
				},
				{
					"include": "#double-three-regexp-lookahead-negative"
				},
				{
					"include": "#double-three-regexp-lookbehind"
				},
				{
					"include": "#double-three-regexp-lookbehind-negative"
				},
				{
					"include": "#double-three-regexp-conditional"
				},
				{
					"include": "#double-three-regexp-parentheses-non-capturing"
				},
				{
					"include": "#double-three-regexp-parentheses"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-character-set": {
			"patterns": [
				{
					"match": "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"
				},
				{
					"name": "meta.character.set.regexp",
					"begin": "(\\[)(\\^)?(\\])?",
					"end": "(\\]|(?=\"\"\"))",
					"beginCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.begin.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						},
						"3": {
							"name": "constant.character.set.regexp"
						}
					},
					"endCaptures": {
						"1": {
							"name": "constant.other.set.regexp punctuation.character.set.end.regexp"
						},
						"2": {
							"name": "invalid.illegal.newline.bazel"
						}
					},
					"patterns": [
						{
							"include": "#regexp-charecter-set-escapes"
						},
						{
							"name": "constant.character.set.regexp",
							"match": "[^\\n]"
						}
					]
				}
			]
		},
		"double-three-regexp-named-group": {
			"name": "meta.named.regexp",
			"begin": "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.begin.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "entity.name.tag.named.group.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.named.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-comments": {
			"name": "comment.regexp",
			"begin": "\\(\\?#",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.comment.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.comment.end.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"double-three-regexp-lookahead": {
			"begin": "(\\()\\?=",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-lookahead-negative": {
			"begin": "(\\()\\?!",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookahead.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookahead.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookahead.end.regexp keyword.operator.lookahead.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-lookbehind": {
			"begin": "(\\()\\?<=",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-lookbehind-negative": {
			"begin": "(\\()\\?<!",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.lookbehind.negative.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.lookbehind.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.lookbehind.end.regexp keyword.operator.lookbehind.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-conditional": {
			"begin": "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.conditional.regexp"
				},
				"1": {
					"name": "punctuation.parenthesis.conditional.begin.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.conditional.end.regexp keyword.operator.conditional.negative.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-parentheses-non-capturing": {
			"begin": "\\(\\?:",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.non-capturing.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.non-capturing.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"double-three-regexp-parentheses": {
			"begin": "\\(",
			"end": "(\\)|(?=\"\"\"))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.regexp support.other.parenthesis.regexp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.end.regexp support.other.parenthesis.regexp"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#double-three-regexp-expression"
				},
				{
					"include": "#comments-string-double-three"
				}
			]
		},
		"string-raw-quoted-single-line": {
			"name": "string.quoted.raw.single.bazel",
			"begin": "\\b(([uU]R)|(R))((['\"]))",
			"end": "(\\4)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.bazel"
				},
				"3": {
					"name": "storage.type.string.bazel"
				},
				"4": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-single-bad-brace1-formatting-raw"
				},
				{
					"include": "#string-single-bad-brace2-formatting-raw"
				},
				{
					"include": "#string-raw-guts"
				}
			]
		},
		"string-bin-quoted-single-line": {
			"name": "string.quoted.binary.single.bazel",
			"begin": "(\\b[bB])((['\"]))",
			"end": "(\\2)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.bazel"
				},
				"2": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-entity"
				}
			]
		},
		"string-raw-bin-quoted-single-line": {
			"name": "string.quoted.raw.binary.single.bazel",
			"begin": "(\\b(?:R[bB]|[bB]R))((['\"]))",
			"end": "(\\2)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.bazel"
				},
				"2": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-raw-bin-guts"
				}
			]
		},
		"string-quoted-single-line": {
			"name": "string.quoted.single.bazel",
			"begin": "(\\b[rR](?=[uU]))?([uU])?((['\"]))",
			"end": "(\\3)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "invalid.illegal.prefix.bazel"
				},
				"2": {
					"name": "storage.type.string.bazel"
				},
				"3": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-single-bad-brace1-formatting-unicode"
				},
				{
					"include": "#string-single-bad-brace2-formatting-unicode"
				},
				{
					"include": "#string-unicode-guts"
				}
			]
		},
		"string-single-bad-brace1-formatting-unicode": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!(['\"])|((?<!\\\\)\\n)) )\n        %\\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				}
			]
		},
		"string-single-bad-brace1-formatting-raw": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!(['\"])|((?<!\\\\)\\n)) )\n        %\\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [
				{
					"include": "#string-consume-escape"
				}
			]
		},
		"string-single-bad-brace2-formatting-unicode": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!(['\"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]\n           )\n        .*?(?!(['\"])|((?<!\\\\)\\n))\n        \\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#string-entity"
				}
			]
		},
		"string-single-bad-brace2-formatting-raw": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!(['\"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]\n           )\n        .*?(?!(['\"])|((?<!\\\\)\\n))\n        \\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [
				{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				}
			]
		},
		"string-raw-quoted-multi-line": {
			"name": "string.quoted.raw.multi.bazel",
			"begin": "\\b(([uU]R)|(R))('''|\"\"\")",
			"end": "(\\4)",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.bazel"
				},
				"3": {
					"name": "storage.type.string.bazel"
				},
				"4": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-multi-bad-brace1-formatting-raw"
				},
				{
					"include": "#string-multi-bad-brace2-formatting-raw"
				},
				{
					"include": "#string-raw-guts"
				}
			]
		},
		"string-bin-quoted-multi-line": {
			"name": "string.quoted.binary.multi.bazel",
			"begin": "(\\b[bB])('''|\"\"\")",
			"end": "(\\2)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.bazel"
				},
				"2": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-entity"
				}
			]
		},
		"string-raw-bin-quoted-multi-line": {
			"name": "string.quoted.raw.binary.multi.bazel",
			"begin": "(\\b(?:R[bB]|[bB]R))('''|\"\"\")",
			"end": "(\\2)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.bazel"
				},
				"2": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-raw-bin-guts"
				}
			]
		},
		"string-quoted-multi-line": {
			"name": "string.quoted.multi.bazel",
			"begin": "(\\b[rR](?=[uU]))?([uU])?('''|\"\"\")",
			"end": "(\\3)",
			"beginCaptures": {
				"1": {
					"name": "invalid.illegal.prefix.bazel"
				},
				"2": {
					"name": "storage.type.string.bazel"
				},
				"3": {
					"name": "punctuation.definition.string.begin.bazel"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.bazel"
				},
				"2": {
					"name": "invalid.illegal.newline.bazel"
				}
			},
			"patterns": [
				{
					"include": "#string-multi-bad-brace1-formatting-unicode"
				},
				{
					"include": "#string-multi-bad-brace2-formatting-unicode"
				},
				{
					"include": "#string-unicode-guts"
				}
			]
		},
		"string-multi-bad-brace1-formatting-unicode": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!'''|\"\"\") )\n        %\\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				}
			]
		},
		"string-multi-bad-brace1-formatting-raw": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!'''|\"\"\") )\n        %\\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [
				{
					"include": "#string-consume-escape"
				}
			]
		},
		"string-multi-bad-brace2-formatting-unicode": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!'''|\"\"\") [^!:\\.\\[}\\w]\n           )\n        .*?(?!'''|\"\"\")\n        \\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#string-entity"
				}
			]
		},
		"string-multi-bad-brace2-formatting-raw": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!'''|\"\"\") [^!:\\.\\[}\\w]\n           )\n        .*?(?!'''|\"\"\")\n        \\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [
				{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				}
			]
		}
	},
	"version": "https://github.com/MagicStack/MagicPython/commit/37b660d0490d69ffd8cb4eabc0dd768e6cdaae7a"
}