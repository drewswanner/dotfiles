"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const disposable_object_1 = require("./disposable-object");
const vscode_1 = require("vscode");
/**
 * A collection of `FileSystemWatcher` objects. Disposing this object disposes all of the individual
 * `FileSystemWatcher` objects and their event registrations.
 */
class WatcherCollection extends disposable_object_1.DisposableObject {
    constructor() {
        super();
    }
    /**
     * Create a `FileSystemWatcher` and add it to the collection.
     * @param pattern The pattern to watch.
     * @param listener The event listener to be invoked when a watched file is created, changed, or
     *   deleted.
     * @param thisArgs The `this` argument for the event listener.
     */
    addWatcher(pattern, listener, thisArgs) {
        const watcher = vscode_1.workspace.createFileSystemWatcher(pattern);
        this.push(watcher.onDidCreate(listener, thisArgs));
        this.push(watcher.onDidChange(listener, thisArgs));
        this.push(watcher.onDidDelete(listener, thisArgs));
    }
}
/**
 * A class to watch multiple patterns in the file system at the same time, reporting all
 * notifications via a single event.
 */
class MultiFileSystemWatcher extends disposable_object_1.DisposableObject {
    constructor() {
        super();
        this._onDidChange = this.push(new vscode_1.EventEmitter());
        this.watchers = this.track(new WatcherCollection());
    }
    /**
     * Event to be fired when any watched file is created, changed, or deleted.
     */
    get onDidChange() { return this._onDidChange.event; }
    /**
     * Adds a new pattern to watch.
     * @param pattern The pattern to watch.
     */
    addWatch(pattern) {
        this.watchers.addWatcher(pattern, this.handleDidChange, this);
    }
    /**
     * Deletes all existing watchers.
     */
    clear() {
        this.disposeAndStopTracking(this.watchers);
        this.watchers = this.track(new WatcherCollection());
    }
    handleDidChange(uri) {
        this._onDidChange.fire(uri);
    }
}
exports.MultiFileSystemWatcher = MultiFileSystemWatcher;

//# sourceMappingURL=multi-file-system-watcher.js.map
